// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// SetUser mocks base method
func (m *MockLogger) SetUser(ctx context.Context, userID int64, userName string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", ctx, userID, userName)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetUser indicates an expected call of SetUser
func (mr *MockLoggerMockRecorder) SetUser(ctx, userID, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockLogger)(nil).SetUser), ctx, userID, userName)
}

// Error mocks base method
func (m *MockLogger) Error(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", ctx, err)
}

// Error indicates an expected call of Error
func (mr *MockLoggerMockRecorder) Error(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), ctx, err)
}
